
extensions [ rnd ]
globals [generational-change reduce-sample tot-pop]

turtles-own [pgs-bmi
            bmi
            bmi-group
            coupled?
            partner
            bmi-max
            bmi-min
            father
            mother
            generation
            reproduced?
            exp-children
            n-children
            bmi-part
            partner-t
           ]

to setup
  clear-all
  create-sample
  reset-ticks
end


to create-sample
  create-turtles initial-people + 100 [ setxy random-xcor random-ycor
    set generational-change 0
    set generation 0
    set coupled? false
    set reproduced? false
    set exp-children 0
    set n-children 0
    set partner-t 0
    ifelse random 2 = 0
        [ set shape "person righty" ] ;; Setting gender
        [ set shape "person lefty" ]
    set pgs-bmi random-normal 0 1
    set  bmi 27.796 + 1.071 * ( 1 + p ) * pgs-bmi  + random-normal 0 4.55
    if ( bmi  < 18.5 ) [set bmi-group 1]
    if ( bmi  >= 18.5 ) and (bmi < 25) [set bmi-group 2]
    if ( bmi  >= 25 ) and (bmi < 30) [set bmi-group 3]
    if ( bmi  >= 30 ) [set bmi-group 4]
   ]
end


to go
  ask turtles [if generation <= generational-change - 1 [die]
  set coupled? false
  set partner-t 0]
  set tot-pop count turtles
  set generational-change generational-change + 1
  gen-globals
  ask turtles [
    set reduce-sample count turtles
 if not coupled? and shape = "person righty"
        [ couple ]
    if coupled? and shape = "person righty"
         [reproduce]
    if reduce-sample > 12000 [ if coupled? [ask partner [die]] 
        die]]
  tick
end

to gen-globals
let part-1 (1 - omega) * tot-pop / 2

ask n-of part-1 turtles [set partner-t 1]
end


to couple
  ifelse partner-t = 0 [
    let potential-partner one-of turtles with [
      not coupled? and
      shape = "person lefty" and  
      (bmi-group = [bmi-group] of myself) and 
      (generation = [generation] of myself)
    ]
    ifelse potential-partner = nobody [
      set partner-t 1 
      couple  
    ]
    [ set partner potential-partner
      set coupled? true
      ask partner [ 
        set coupled? true 
        set partner myself ]]]
  [let potential-partner one-of turtles with [
      not coupled? and
      shape = "person lefty" and  
      (generation = [generation] of myself)]
    if potential-partner != nobody [
      set partner potential-partner
      set coupled? true
      ask partner [ 
        set coupled? true 
        set partner myself ]]]
  
  if coupled? [
  if partner != nobody [
  if ([bmi-group] of partner) > bmi-group
  [set bmi-max  ([bmi-group] of partner)
  set bmi-min  bmi-group ]
  if ([bmi-group] of partner) < bmi-group
  [set bmi-max  bmi-group
   set bmi-min ([bmi-group] of partner)]
  if ([bmi-group] of partner) = bmi-group
  [set bmi-max  bmi-group
        set bmi-min ([bmi-group] of partner)]]]
end

to reproduce
  set exp-children ( 2 + ( bmi-max + bmi-min - 6 ) * phi / 2 )
  
  let base-children floor exp-children        
  let chance-extra exp-children - base-children 
  if (random-float 1 < chance-extra) [
    set base-children base-children + 1]
  
  repeat base-children [
    baby-boom]
  ask partner [ die ]
  die
end


to baby-boom
  hatch 1    [
       set father partner
        set mother ([partner] of father)

        set reproduced? false
        set n-children 0
        set bmi-part 0
        set partner nobody
        set generation generation + 1

        ifelse random 2 = 0
        [ set shape "person righty" ]
        [ set shape "person lefty" ]
    set pgs-bmi (([pgs-bmi] of mother) + ([pgs-bmi] of father)) / 2 + random-normal 0 0.7
    set  bmi 27.796 + 1.071 * ( 1 + p ) * pgs-bmi  + random-normal 0 4.55
    if ( bmi  < 18.5 ) [set bmi-group 1]
    if ( bmi  >= 18.5 ) and (bmi < 25) [set bmi-group 2]
    if ( bmi  >= 25 ) and (bmi < 30) [set bmi-group 3]
    if ( bmi  >= 30 ) [set bmi-group 4]
    set bmi-max 0
   set bmi-min 0
  ]
end
